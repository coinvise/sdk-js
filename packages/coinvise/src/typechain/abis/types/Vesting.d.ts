/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons"

interface VestingInterface extends ethers.utils.Interface {
  functions: {
    "beneficiary()": FunctionFragment
    "cliff()": FunctionFragment
    "creator()": FunctionFragment
    "initialize(address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment
    "nextUnlock()": FunctionFragment
    "noOfMonths()": FunctionFragment
    "releasableAmount()": FunctionFragment
    "release()": FunctionFragment
    "releasePerMonth()": FunctionFragment
    "released()": FunctionFragment
    "revoke()": FunctionFragment
    "revoked()": FunctionFragment
    "start()": FunctionFragment
    "token()": FunctionFragment
    "vestedAmount()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "beneficiary", values?: undefined): string
  encodeFunctionData(functionFragment: "cliff", values?: undefined): string
  encodeFunctionData(functionFragment: "creator", values?: undefined): string
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "nextUnlock", values?: undefined): string
  encodeFunctionData(functionFragment: "noOfMonths", values?: undefined): string
  encodeFunctionData(functionFragment: "releasableAmount", values?: undefined): string
  encodeFunctionData(functionFragment: "release", values?: undefined): string
  encodeFunctionData(functionFragment: "releasePerMonth", values?: undefined): string
  encodeFunctionData(functionFragment: "released", values?: undefined): string
  encodeFunctionData(functionFragment: "revoke", values?: undefined): string
  encodeFunctionData(functionFragment: "revoked", values?: undefined): string
  encodeFunctionData(functionFragment: "start", values?: undefined): string
  encodeFunctionData(functionFragment: "token", values?: undefined): string
  encodeFunctionData(functionFragment: "vestedAmount", values?: undefined): string

  decodeFunctionResult(functionFragment: "beneficiary", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "cliff", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "nextUnlock", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "noOfMonths", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "releasableAmount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "releasePerMonth", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "released", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "revoked", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "vestedAmount", data: BytesLike): Result

  events: {
    "Released(uint256)": EventFragment
    "Revoked()": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "Released"): EventFragment
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment
}

export type ReleasedEvent = TypedEvent<[BigNumber] & { amount: BigNumber }>

export type RevokedEvent = TypedEvent<[] & {}>

export class Vesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: VestingInterface

  functions: {
    beneficiary(overrides?: CallOverrides): Promise<[string]>

    cliff(overrides?: CallOverrides): Promise<[BigNumber]>

    creator(overrides?: CallOverrides): Promise<[string]>

    initialize(
      _creator: string,
      _token: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _totalTokens: BigNumberish,
      _noOfMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    nextUnlock(overrides?: CallOverrides): Promise<[BigNumber]>

    noOfMonths(overrides?: CallOverrides): Promise<[BigNumber]>

    releasableAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    release(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    releasePerMonth(overrides?: CallOverrides): Promise<[BigNumber]>

    released(overrides?: CallOverrides): Promise<[BigNumber]>

    revoke(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    revoked(overrides?: CallOverrides): Promise<[boolean]>

    start(overrides?: CallOverrides): Promise<[BigNumber]>

    token(overrides?: CallOverrides): Promise<[string]>

    vestedAmount(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  beneficiary(overrides?: CallOverrides): Promise<string>

  cliff(overrides?: CallOverrides): Promise<BigNumber>

  creator(overrides?: CallOverrides): Promise<string>

  initialize(
    _creator: string,
    _token: string,
    _beneficiary: string,
    _start: BigNumberish,
    _cliff: BigNumberish,
    _totalTokens: BigNumberish,
    _noOfMonths: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  nextUnlock(overrides?: CallOverrides): Promise<BigNumber>

  noOfMonths(overrides?: CallOverrides): Promise<BigNumber>

  releasableAmount(overrides?: CallOverrides): Promise<BigNumber>

  release(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  releasePerMonth(overrides?: CallOverrides): Promise<BigNumber>

  released(overrides?: CallOverrides): Promise<BigNumber>

  revoke(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  revoked(overrides?: CallOverrides): Promise<boolean>

  start(overrides?: CallOverrides): Promise<BigNumber>

  token(overrides?: CallOverrides): Promise<string>

  vestedAmount(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    beneficiary(overrides?: CallOverrides): Promise<string>

    cliff(overrides?: CallOverrides): Promise<BigNumber>

    creator(overrides?: CallOverrides): Promise<string>

    initialize(
      _creator: string,
      _token: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _totalTokens: BigNumberish,
      _noOfMonths: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    nextUnlock(overrides?: CallOverrides): Promise<BigNumber>

    noOfMonths(overrides?: CallOverrides): Promise<BigNumber>

    releasableAmount(overrides?: CallOverrides): Promise<BigNumber>

    release(overrides?: CallOverrides): Promise<void>

    releasePerMonth(overrides?: CallOverrides): Promise<BigNumber>

    released(overrides?: CallOverrides): Promise<BigNumber>

    revoke(overrides?: CallOverrides): Promise<void>

    revoked(overrides?: CallOverrides): Promise<boolean>

    start(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    vestedAmount(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    "Released(uint256)"(amount?: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>

    Released(amount?: null): TypedEventFilter<[BigNumber], { amount: BigNumber }>

    "Revoked()"(): TypedEventFilter<[], {}>

    Revoked(): TypedEventFilter<[], {}>
  }

  estimateGas: {
    beneficiary(overrides?: CallOverrides): Promise<BigNumber>

    cliff(overrides?: CallOverrides): Promise<BigNumber>

    creator(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _creator: string,
      _token: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _totalTokens: BigNumberish,
      _noOfMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    nextUnlock(overrides?: CallOverrides): Promise<BigNumber>

    noOfMonths(overrides?: CallOverrides): Promise<BigNumber>

    releasableAmount(overrides?: CallOverrides): Promise<BigNumber>

    release(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    releasePerMonth(overrides?: CallOverrides): Promise<BigNumber>

    released(overrides?: CallOverrides): Promise<BigNumber>

    revoke(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    revoked(overrides?: CallOverrides): Promise<BigNumber>

    start(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    vestedAmount(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>

    cliff(overrides?: CallOverrides): Promise<PopulatedTransaction>

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _creator: string,
      _token: string,
      _beneficiary: string,
      _start: BigNumberish,
      _cliff: BigNumberish,
      _totalTokens: BigNumberish,
      _noOfMonths: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    nextUnlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    noOfMonths(overrides?: CallOverrides): Promise<PopulatedTransaction>

    releasableAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    release(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    releasePerMonth(overrides?: CallOverrides): Promise<PopulatedTransaction>

    released(overrides?: CallOverrides): Promise<PopulatedTransaction>

    revoke(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    revoked(overrides?: CallOverrides): Promise<PopulatedTransaction>

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    vestedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
