/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons"

interface NftAirdropABIInterface extends ethers.utils.Interface {
  functions: {
    "_initialize(string,string)": FunctionFragment
    "claim(address,uint256,bytes32,bytes32,uint8)": FunctionFragment
    "createCampaign(address,uint256,uint256[])": FunctionFragment
    "createCampaignMeta(address,uint256,uint256[])": FunctionFragment
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment
    "getCampaign(address,uint256)": FunctionFragment
    "getCampaignIdsFromManager(address)": FunctionFragment
    "getCampaignRewardedCount(address,uint256)": FunctionFragment
    "getNonce(address)": FunctionFragment
    "initialize(address,uint256)": FunctionFragment
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment
    "owner()": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "setTrustedAddress(address)": FunctionFragment
    "setWeiPerAirDropLink(uint256)": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "weiPerAirDropLink()": FunctionFragment
    "withdrawCoinviseBalance()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "_initialize", values: [string, string]): string
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, BigNumberish, BytesLike, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "createCampaign", values: [string, BigNumberish, BigNumberish[]]): string
  encodeFunctionData(functionFragment: "createCampaignMeta", values: [string, BigNumberish, BigNumberish[]]): string
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "getCampaign", values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: "getCampaignIdsFromManager", values: [string]): string
  encodeFunctionData(functionFragment: "getCampaignRewardedCount", values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string
  encodeFunctionData(functionFragment: "initialize", values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: "onERC721Received", values: [string, string, BigNumberish, BytesLike]): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "setTrustedAddress", values: [string]): string
  encodeFunctionData(functionFragment: "setWeiPerAirDropLink", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string
  encodeFunctionData(functionFragment: "weiPerAirDropLink", values?: undefined): string
  encodeFunctionData(functionFragment: "withdrawCoinviseBalance", values?: undefined): string

  decodeFunctionResult(functionFragment: "_initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "createCampaign", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "createCampaignMeta", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "executeMetaTransaction", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCampaign", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCampaignIdsFromManager", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCampaignRewardedCount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setTrustedAddress", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setWeiPerAirDropLink", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "weiPerAirDropLink", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawCoinviseBalance", data: BytesLike): Result

  events: {
    "CampaignCreated(address,uint256)": EventFragment
    "MetaTransactionExecuted(address,address,bytes)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "UserRewarded(address,uint256,address,address,uint256)": EventFragment
    "WithdrawnCoinviseBalance(address,uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "CampaignCreated"): EventFragment
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "UserRewarded"): EventFragment
  getEvent(nameOrSignatureOrTopic: "WithdrawnCoinviseBalance"): EventFragment
}

export type CampaignCreatedEvent = TypedEvent<[string, BigNumber] & { campaignManager: string; campaignId: BigNumber }>

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string] & {
    userAddress: string
    relayerAddress: string
    functionSignature: string
  }
>

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>

export type UserRewardedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    managerAddress: string
    campaignId: BigNumber
    userAddress: string
    tokenAddress: string
    tokenId: BigNumber
  }
>

export type WithdrawnCoinviseBalanceEvent = TypedEvent<[string, BigNumber] & { user: string; amount: BigNumber }>

export class NftAirdropABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: NftAirdropABIInterface

  functions: {
    _initialize(
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    claim(
      _campaignManager: string,
      _campaignId: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    createCampaign(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    createCampaignMeta(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getCampaign(
      _campaignManager: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, BigNumber, BigNumber, BigNumber[]]>

    getCampaignIdsFromManager(_campaignManager: string, overrides?: CallOverrides): Promise<[BigNumber[]]>

    getCampaignRewardedCount(
      _manager: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    getNonce(user: string, overrides?: CallOverrides): Promise<[BigNumber] & { nonce: BigNumber }>

    initialize(
      _trustedAddress: string,
      _weiPerAirDropLink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setTrustedAddress(
      _trustedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setWeiPerAirDropLink(
      _weiPerAirDropLink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    weiPerAirDropLink(overrides?: CallOverrides): Promise<[BigNumber]>

    withdrawCoinviseBalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>
  }

  _initialize(
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  claim(
    _campaignManager: string,
    _campaignId: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    v: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  createCampaign(
    _tokenAddress: string,
    _linksAmount: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  createCampaignMeta(
    _tokenAddress: string,
    _linksAmount: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getCampaign(
    _campaignManager: string,
    _campaignId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string, BigNumber, BigNumber, BigNumber[]]>

  getCampaignIdsFromManager(_campaignManager: string, overrides?: CallOverrides): Promise<BigNumber[]>

  getCampaignRewardedCount(_manager: string, _campaignId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>

  initialize(
    _trustedAddress: string,
    _weiPerAirDropLink: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setTrustedAddress(
    _trustedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setWeiPerAirDropLink(
    _weiPerAirDropLink: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  weiPerAirDropLink(overrides?: CallOverrides): Promise<BigNumber>

  withdrawCoinviseBalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  callStatic: {
    _initialize(_name: string, _version: string, overrides?: CallOverrides): Promise<void>

    claim(
      _campaignManager: string,
      _campaignId: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    createCampaign(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    createCampaignMeta(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getCampaign(
      _campaignManager: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, BigNumber, BigNumber, BigNumber[]]>

    getCampaignIdsFromManager(_campaignManager: string, overrides?: CallOverrides): Promise<BigNumber[]>

    getCampaignRewardedCount(_manager: string, _campaignId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>

    initialize(_trustedAddress: string, _weiPerAirDropLink: BigNumberish, overrides?: CallOverrides): Promise<void>

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    setTrustedAddress(_trustedAddress: string, overrides?: CallOverrides): Promise<void>

    setWeiPerAirDropLink(_weiPerAirDropLink: BigNumberish, overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    weiPerAirDropLink(overrides?: CallOverrides): Promise<BigNumber>

    withdrawCoinviseBalance(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "CampaignCreated(address,uint256)"(
      campaignManager?: string | null,
      campaignId?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { campaignManager: string; campaignId: BigNumber }>

    CampaignCreated(
      campaignManager?: string | null,
      campaignId?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { campaignManager: string; campaignId: BigNumber }>

    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >

    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    "UserRewarded(address,uint256,address,address,uint256)"(
      managerAddress?: string | null,
      campaignId?: BigNumberish | null,
      userAddress?: string | null,
      tokenAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        managerAddress: string
        campaignId: BigNumber
        userAddress: string
        tokenAddress: string
        tokenId: BigNumber
      }
    >

    UserRewarded(
      managerAddress?: string | null,
      campaignId?: BigNumberish | null,
      userAddress?: string | null,
      tokenAddress?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        managerAddress: string
        campaignId: BigNumber
        userAddress: string
        tokenAddress: string
        tokenId: BigNumber
      }
    >

    "WithdrawnCoinviseBalance(address,uint256)"(
      user?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { user: string; amount: BigNumber }>

    WithdrawnCoinviseBalance(
      user?: null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { user: string; amount: BigNumber }>
  }

  estimateGas: {
    _initialize(
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    claim(
      _campaignManager: string,
      _campaignId: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    createCampaign(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    createCampaignMeta(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getCampaign(_campaignManager: string, _campaignId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getCampaignIdsFromManager(_campaignManager: string, overrides?: CallOverrides): Promise<BigNumber>

    getCampaignRewardedCount(_manager: string, _campaignId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _trustedAddress: string,
      _weiPerAirDropLink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setTrustedAddress(
      _trustedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setWeiPerAirDropLink(
      _weiPerAirDropLink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    weiPerAirDropLink(overrides?: CallOverrides): Promise<BigNumber>

    withdrawCoinviseBalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    _initialize(
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    claim(
      _campaignManager: string,
      _campaignId: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      v: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    createCampaign(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    createCampaignMeta(
      _tokenAddress: string,
      _linksAmount: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getCampaign(
      _campaignManager: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getCampaignIdsFromManager(_campaignManager: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCampaignRewardedCount(
      _manager: string,
      _campaignId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getNonce(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _trustedAddress: string,
      _weiPerAirDropLink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setTrustedAddress(
      _trustedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setWeiPerAirDropLink(
      _weiPerAirDropLink: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    weiPerAirDropLink(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdrawCoinviseBalance(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>
  }
}
