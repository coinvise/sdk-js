/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons"

interface NftProxyABIInterface extends ethers.utils.Interface {
  functions: {
    "buyNft(uint256)": FunctionFragment
    "getCurrentNftListingCount()": FunctionFragment
    "getCurrentNftListingIds()": FunctionFragment
    "initialize()": FunctionFragment
    "isPaused()": FunctionFragment
    "listNftInEth(address,uint256,uint256,uint256,address)": FunctionFragment
    "nftListingById(uint256)": FunctionFragment
    "owner()": FunctionFragment
    "pauseProxy()": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "resumeProxy()": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "unlistNft(uint256)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "buyNft", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "getCurrentNftListingCount", values?: undefined): string
  encodeFunctionData(functionFragment: "getCurrentNftListingIds", values?: undefined): string
  encodeFunctionData(functionFragment: "initialize", values?: undefined): string
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string
  encodeFunctionData(
    functionFragment: "listNftInEth",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(functionFragment: "nftListingById", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "pauseProxy", values?: undefined): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "resumeProxy", values?: undefined): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string
  encodeFunctionData(functionFragment: "unlistNft", values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: "buyNft", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCurrentNftListingCount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCurrentNftListingIds", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "listNftInEth", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "nftListingById", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "pauseProxy", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "resumeProxy", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "unlistNft", data: BytesLike): Result

  events: {
    "NftBought(address,uint256)": EventFragment
    "NftDelisted(uint256)": EventFragment
    "NftListed(uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "NftBought"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NftDelisted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NftListed"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
}

export type NftBoughtEvent = TypedEvent<[string, BigNumber] & { buyer: string; nftListingId: BigNumber }>

export type NftDelistedEvent = TypedEvent<[BigNumber] & { listingId: BigNumber }>

export type NftListedEvent = TypedEvent<[BigNumber] & { listingId: BigNumber }>

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>

export class NftProxyABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: NftProxyABIInterface

  functions: {
    buyNft(
      _nftListingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<[BigNumber]>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<[BigNumber[]]>

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    isPaused(overrides?: CallOverrides): Promise<[boolean]>

    listNftInEth(
      _nftTokenAddress: string,
      _nftListingId: BigNumberish,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      _recipientAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    nftListingById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string] & {
        listingId: BigNumber
        nftTokenAddress: string
        nftTokenId: BigNumber
        paymentAmount: BigNumber
        recipientAddress: string
      }
    >

    owner(overrides?: CallOverrides): Promise<[string]>

    pauseProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    resumeProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unlistNft(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  buyNft(
    _nftListingId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getCurrentNftListingCount(overrides?: CallOverrides): Promise<BigNumber>

  getCurrentNftListingIds(overrides?: CallOverrides): Promise<BigNumber[]>

  initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  isPaused(overrides?: CallOverrides): Promise<boolean>

  listNftInEth(
    _nftTokenAddress: string,
    _nftListingId: BigNumberish,
    _nftTokenId: BigNumberish,
    _priceInWei: BigNumberish,
    _recipientAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  nftListingById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber, string] & {
      listingId: BigNumber
      nftTokenAddress: string
      nftTokenId: BigNumber
      paymentAmount: BigNumber
      recipientAddress: string
    }
  >

  owner(overrides?: CallOverrides): Promise<string>

  pauseProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  resumeProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unlistNft(
    _nftListingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    buyNft(_nftListingId: BigNumberish, overrides?: CallOverrides): Promise<void>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<BigNumber[]>

    initialize(overrides?: CallOverrides): Promise<void>

    isPaused(overrides?: CallOverrides): Promise<boolean>

    listNftInEth(
      _nftTokenAddress: string,
      _nftListingId: BigNumberish,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      _recipientAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    nftListingById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber, string] & {
        listingId: BigNumber
        nftTokenAddress: string
        nftTokenId: BigNumber
        paymentAmount: BigNumber
        recipientAddress: string
      }
    >

    owner(overrides?: CallOverrides): Promise<string>

    pauseProxy(overrides?: CallOverrides): Promise<void>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    resumeProxy(overrides?: CallOverrides): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    unlistNft(_nftListingId: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "NftBought(address,uint256)"(
      buyer?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { buyer: string; nftListingId: BigNumber }>

    NftBought(
      buyer?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { buyer: string; nftListingId: BigNumber }>

    "NftDelisted(uint256)"(listingId?: null): TypedEventFilter<[BigNumber], { listingId: BigNumber }>

    NftDelisted(listingId?: null): TypedEventFilter<[BigNumber], { listingId: BigNumber }>

    "NftListed(uint256)"(listingId?: null): TypedEventFilter<[BigNumber], { listingId: BigNumber }>

    NftListed(listingId?: null): TypedEventFilter<[BigNumber], { listingId: BigNumber }>

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>
  }

  estimateGas: {
    buyNft(
      _nftListingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<BigNumber>

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    isPaused(overrides?: CallOverrides): Promise<BigNumber>

    listNftInEth(
      _nftTokenAddress: string,
      _nftListingId: BigNumberish,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      _recipientAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    nftListingById(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pauseProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    resumeProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    unlistNft(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    buyNft(
      _nftListingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    listNftInEth(
      _nftTokenAddress: string,
      _nftListingId: BigNumberish,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      _recipientAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    nftListingById(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    resumeProxy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unlistNft(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
