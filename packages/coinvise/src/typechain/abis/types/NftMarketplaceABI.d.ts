/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers"
import { BytesLike } from "@ethersproject/bytes"
import { Listener, Provider } from "@ethersproject/providers"
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi"
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons"

interface NftMarketplaceABIInterface extends ethers.utils.Interface {
  functions: {
    "_initialize(string,string)": FunctionFragment
    "blackListTokens(address[])": FunctionFragment
    "buyNftInErc20Tokens(uint256)": FunctionFragment
    "buyNftInEth(uint256)": FunctionFragment
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment
    "getCurrentNftListingCount()": FunctionFragment
    "getCurrentNftListingIds()": FunctionFragment
    "getNonce(address)": FunctionFragment
    "hasUserLikedNftListing(address,uint256)": FunctionFragment
    "initialize(uint256,uint256,uint256,address[])": FunctionFragment
    "isPaused()": FunctionFragment
    "isPaymentTokenWhiteListed(address)": FunctionFragment
    "likeNftListing(uint256)": FunctionFragment
    "listNftInErc20(address,uint256,address,uint256)": FunctionFragment
    "listNftInEth(address,uint256,uint256)": FunctionFragment
    "nftListingById(uint256)": FunctionFragment
    "nftListingFee()": FunctionFragment
    "owner()": FunctionFragment
    "pauseMarketplace()": FunctionFragment
    "premiumPercentage()": FunctionFragment
    "premiumPercentageDecimals()": FunctionFragment
    "renounceOwnership()": FunctionFragment
    "resumeMarketplace()": FunctionFragment
    "setIsWhiteListActive(bool)": FunctionFragment
    "setNftListingFee(uint256)": FunctionFragment
    "setPremiumPercentage(uint256,uint256)": FunctionFragment
    "transferOwnership(address)": FunctionFragment
    "undoLikeNftListing(uint256)": FunctionFragment
    "unlistNftByListingCreator(uint256)": FunctionFragment
    "whiteListTokens(address[])": FunctionFragment
    "withdrawErc20Premiums(address,address)": FunctionFragment
    "withdrawEthPremiums(address)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "_initialize", values: [string, string]): string
  encodeFunctionData(functionFragment: "blackListTokens", values: [string[]]): string
  encodeFunctionData(functionFragment: "buyNftInErc20Tokens", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "buyNftInEth", values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [string, BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: "getCurrentNftListingCount", values?: undefined): string
  encodeFunctionData(functionFragment: "getCurrentNftListingIds", values?: undefined): string
  encodeFunctionData(functionFragment: "getNonce", values: [string]): string
  encodeFunctionData(functionFragment: "hasUserLikedNftListing", values: [string, BigNumberish]): string
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string
  encodeFunctionData(functionFragment: "isPaused", values?: undefined): string
  encodeFunctionData(functionFragment: "isPaymentTokenWhiteListed", values: [string]): string
  encodeFunctionData(functionFragment: "likeNftListing", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "listNftInErc20", values: [string, BigNumberish, string, BigNumberish]): string
  encodeFunctionData(functionFragment: "listNftInEth", values: [string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: "nftListingById", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "nftListingFee", values?: undefined): string
  encodeFunctionData(functionFragment: "owner", values?: undefined): string
  encodeFunctionData(functionFragment: "pauseMarketplace", values?: undefined): string
  encodeFunctionData(functionFragment: "premiumPercentage", values?: undefined): string
  encodeFunctionData(functionFragment: "premiumPercentageDecimals", values?: undefined): string
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string
  encodeFunctionData(functionFragment: "resumeMarketplace", values?: undefined): string
  encodeFunctionData(functionFragment: "setIsWhiteListActive", values: [boolean]): string
  encodeFunctionData(functionFragment: "setNftListingFee", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "setPremiumPercentage", values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string
  encodeFunctionData(functionFragment: "undoLikeNftListing", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "unlistNftByListingCreator", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "whiteListTokens", values: [string[]]): string
  encodeFunctionData(functionFragment: "withdrawErc20Premiums", values: [string, string]): string
  encodeFunctionData(functionFragment: "withdrawEthPremiums", values: [string]): string

  decodeFunctionResult(functionFragment: "_initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "blackListTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "buyNftInErc20Tokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "buyNftInEth", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "executeMetaTransaction", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCurrentNftListingCount", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getCurrentNftListingIds", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "hasUserLikedNftListing", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "isPaymentTokenWhiteListed", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "likeNftListing", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "listNftInErc20", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "listNftInEth", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "nftListingById", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "nftListingFee", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "pauseMarketplace", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "premiumPercentage", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "premiumPercentageDecimals", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "resumeMarketplace", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setIsWhiteListActive", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setNftListingFee", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "setPremiumPercentage", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "undoLikeNftListing", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "unlistNftByListingCreator", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "whiteListTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawErc20Premiums", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "withdrawEthPremiums", data: BytesLike): Result

  events: {
    "MetaTransactionExecuted(address,address,bytes)": EventFragment
    "NftBought(address,uint256)": EventFragment
    "NftDelisted(uint256)": EventFragment
    "NftListed(uint256,address,uint256,address,uint256,uint256,address)": EventFragment
    "NftListingLikeReverted(address,uint256)": EventFragment
    "NftListingLiked(address,uint256)": EventFragment
    "OwnershipTransferred(address,address)": EventFragment
    "WithdrawnErc20Premiums(address,address,uint256)": EventFragment
    "WithdrawnEthPremiums(address,uint256)": EventFragment
  }

  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NftBought"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NftDelisted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NftListed"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NftListingLikeReverted"): EventFragment
  getEvent(nameOrSignatureOrTopic: "NftListingLiked"): EventFragment
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment
  getEvent(nameOrSignatureOrTopic: "WithdrawnErc20Premiums"): EventFragment
  getEvent(nameOrSignatureOrTopic: "WithdrawnEthPremiums"): EventFragment
}

export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string] & {
    userAddress: string
    relayerAddress: string
    functionSignature: string
  }
>

export type NftBoughtEvent = TypedEvent<[string, BigNumber] & { buyer: string; nftListingId: BigNumber }>

export type NftDelistedEvent = TypedEvent<[BigNumber] & { listingId: BigNumber }>

export type NftListedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string] & {
    listingId: BigNumber
    nftTokenAddress: string
    nftTokenId: BigNumber
    listedBy: string
    paymentType: BigNumber
    paymentAmount: BigNumber
    paymentTokenAddress: string
  }
>

export type NftListingLikeRevertedEvent = TypedEvent<[string, BigNumber] & { likedBy: string; nftListingId: BigNumber }>

export type NftListingLikedEvent = TypedEvent<[string, BigNumber] & { likedBy: string; nftListingId: BigNumber }>

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>

export type WithdrawnErc20PremiumsEvent = TypedEvent<
  [string, string, BigNumber] & {
    recipient: string
    erc20Token: string
    amount: BigNumber
  }
>

export type WithdrawnEthPremiumsEvent = TypedEvent<[string, BigNumber] & { recipient: string; amount: BigNumber }>

export class NftMarketplaceABI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: NftMarketplaceABIInterface

  functions: {
    _initialize(
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    blackListTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    buyNftInErc20Tokens(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    buyNftInEth(
      _nftListingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<[BigNumber]>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<[BigNumber[]]>

    getNonce(user: string, overrides?: CallOverrides): Promise<[BigNumber] & { nonce: BigNumber }>

    hasUserLikedNftListing(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>

    initialize(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      _nftListingFee: BigNumberish,
      whiteListedTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isPaused(overrides?: CallOverrides): Promise<[boolean]>

    isPaymentTokenWhiteListed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    likeNftListing(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    listNftInErc20(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _erc20TokenAddress: string,
      _priceInErc20Token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    listNftInEth(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    nftListingById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string] & {
        listingId: BigNumber
        nftTokenAddress: string
        nftTokenId: BigNumber
        listedBy: string
        paymentType: BigNumber
        paymentAmount: BigNumber
        paymentTokenAddress: string
      }
    >

    nftListingFee(overrides?: CallOverrides): Promise<[BigNumber]>

    owner(overrides?: CallOverrides): Promise<[string]>

    pauseMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    premiumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>

    premiumPercentageDecimals(overrides?: CallOverrides): Promise<[BigNumber]>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    resumeMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    setIsWhiteListActive(
      _isPaymentTokenWhiteListActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setNftListingFee(
      _nftListingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setPremiumPercentage(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    undoLikeNftListing(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    unlistNftByListingCreator(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    whiteListTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawErc20Premiums(
      _to: string,
      erc20Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    withdrawEthPremiums(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  _initialize(
    _name: string,
    _version: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  blackListTokens(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  buyNftInErc20Tokens(
    _nftListingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  buyNftInEth(
    _nftListingId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  executeMetaTransaction(
    userAddress: string,
    functionSignature: BytesLike,
    sigR: BytesLike,
    sigS: BytesLike,
    sigV: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getCurrentNftListingCount(overrides?: CallOverrides): Promise<BigNumber>

  getCurrentNftListingIds(overrides?: CallOverrides): Promise<BigNumber[]>

  getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>

  hasUserLikedNftListing(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  initialize(
    _premiumPercentage: BigNumberish,
    _premiumPercentageDecimals: BigNumberish,
    _nftListingFee: BigNumberish,
    whiteListedTokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isPaused(overrides?: CallOverrides): Promise<boolean>

  isPaymentTokenWhiteListed(arg0: string, overrides?: CallOverrides): Promise<boolean>

  likeNftListing(
    _nftListingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  listNftInErc20(
    _nftTokenAddress: string,
    _nftTokenId: BigNumberish,
    _erc20TokenAddress: string,
    _priceInErc20Token: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  listNftInEth(
    _nftTokenAddress: string,
    _nftTokenId: BigNumberish,
    _priceInWei: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  nftListingById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string] & {
      listingId: BigNumber
      nftTokenAddress: string
      nftTokenId: BigNumber
      listedBy: string
      paymentType: BigNumber
      paymentAmount: BigNumber
      paymentTokenAddress: string
    }
  >

  nftListingFee(overrides?: CallOverrides): Promise<BigNumber>

  owner(overrides?: CallOverrides): Promise<string>

  pauseMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  premiumPercentage(overrides?: CallOverrides): Promise<BigNumber>

  premiumPercentageDecimals(overrides?: CallOverrides): Promise<BigNumber>

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  resumeMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setIsWhiteListActive(
    _isPaymentTokenWhiteListActive: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setNftListingFee(
    _nftListingFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setPremiumPercentage(
    _premiumPercentage: BigNumberish,
    _premiumPercentageDecimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  undoLikeNftListing(
    _nftListingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  unlistNftByListingCreator(
    _nftListingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  whiteListTokens(
    tokens: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawErc20Premiums(
    _to: string,
    erc20Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  withdrawEthPremiums(
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    _initialize(_name: string, _version: string, overrides?: CallOverrides): Promise<void>

    blackListTokens(tokens: string[], overrides?: CallOverrides): Promise<void>

    buyNftInErc20Tokens(_nftListingId: BigNumberish, overrides?: CallOverrides): Promise<void>

    buyNftInEth(_nftListingId: BigNumberish, overrides?: CallOverrides): Promise<void>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<BigNumber[]>

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>

    hasUserLikedNftListing(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    initialize(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      _nftListingFee: BigNumberish,
      whiteListedTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>

    isPaused(overrides?: CallOverrides): Promise<boolean>

    isPaymentTokenWhiteListed(arg0: string, overrides?: CallOverrides): Promise<boolean>

    likeNftListing(_nftListingId: BigNumberish, overrides?: CallOverrides): Promise<void>

    listNftInErc20(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _erc20TokenAddress: string,
      _priceInErc20Token: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    listNftInEth(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    nftListingById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string] & {
        listingId: BigNumber
        nftTokenAddress: string
        nftTokenId: BigNumber
        listedBy: string
        paymentType: BigNumber
        paymentAmount: BigNumber
        paymentTokenAddress: string
      }
    >

    nftListingFee(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    pauseMarketplace(overrides?: CallOverrides): Promise<void>

    premiumPercentage(overrides?: CallOverrides): Promise<BigNumber>

    premiumPercentageDecimals(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    resumeMarketplace(overrides?: CallOverrides): Promise<void>

    setIsWhiteListActive(_isPaymentTokenWhiteListActive: boolean, overrides?: CallOverrides): Promise<void>

    setNftListingFee(_nftListingFee: BigNumberish, overrides?: CallOverrides): Promise<void>

    setPremiumPercentage(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>

    undoLikeNftListing(_nftListingId: BigNumberish, overrides?: CallOverrides): Promise<void>

    unlistNftByListingCreator(_nftListingId: BigNumberish, overrides?: CallOverrides): Promise<void>

    whiteListTokens(tokens: string[], overrides?: CallOverrides): Promise<void>

    withdrawErc20Premiums(_to: string, erc20Token: string, overrides?: CallOverrides): Promise<void>

    withdrawEthPremiums(_to: string, overrides?: CallOverrides): Promise<void>
  }

  filters: {
    "MetaTransactionExecuted(address,address,bytes)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >

    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null
    ): TypedEventFilter<
      [string, string, string],
      { userAddress: string; relayerAddress: string; functionSignature: string }
    >

    "NftBought(address,uint256)"(
      buyer?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { buyer: string; nftListingId: BigNumber }>

    NftBought(
      buyer?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { buyer: string; nftListingId: BigNumber }>

    "NftDelisted(uint256)"(listingId?: null): TypedEventFilter<[BigNumber], { listingId: BigNumber }>

    NftDelisted(listingId?: null): TypedEventFilter<[BigNumber], { listingId: BigNumber }>

    "NftListed(uint256,address,uint256,address,uint256,uint256,address)"(
      listingId?: null,
      nftTokenAddress?: null,
      nftTokenId?: null,
      listedBy?: null,
      paymentType?: null,
      paymentAmount?: null,
      paymentTokenAddress?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string],
      {
        listingId: BigNumber
        nftTokenAddress: string
        nftTokenId: BigNumber
        listedBy: string
        paymentType: BigNumber
        paymentAmount: BigNumber
        paymentTokenAddress: string
      }
    >

    NftListed(
      listingId?: null,
      nftTokenAddress?: null,
      nftTokenId?: null,
      listedBy?: null,
      paymentType?: null,
      paymentAmount?: null,
      paymentTokenAddress?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, string, BigNumber, BigNumber, string],
      {
        listingId: BigNumber
        nftTokenAddress: string
        nftTokenId: BigNumber
        listedBy: string
        paymentType: BigNumber
        paymentAmount: BigNumber
        paymentTokenAddress: string
      }
    >

    "NftListingLikeReverted(address,uint256)"(
      likedBy?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { likedBy: string; nftListingId: BigNumber }>

    NftListingLikeReverted(
      likedBy?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { likedBy: string; nftListingId: BigNumber }>

    "NftListingLiked(address,uint256)"(
      likedBy?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { likedBy: string; nftListingId: BigNumber }>

    NftListingLiked(
      likedBy?: string | null,
      nftListingId?: null
    ): TypedEventFilter<[string, BigNumber], { likedBy: string; nftListingId: BigNumber }>

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>

    "WithdrawnErc20Premiums(address,address,uint256)"(
      recipient?: string | null,
      erc20Token?: null,
      amount?: null
    ): TypedEventFilter<[string, string, BigNumber], { recipient: string; erc20Token: string; amount: BigNumber }>

    WithdrawnErc20Premiums(
      recipient?: string | null,
      erc20Token?: null,
      amount?: null
    ): TypedEventFilter<[string, string, BigNumber], { recipient: string; erc20Token: string; amount: BigNumber }>

    "WithdrawnEthPremiums(address,uint256)"(
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { recipient: string; amount: BigNumber }>

    WithdrawnEthPremiums(
      recipient?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { recipient: string; amount: BigNumber }>
  }

  estimateGas: {
    _initialize(
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    blackListTokens(tokens: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    buyNftInErc20Tokens(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    buyNftInEth(
      _nftListingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<BigNumber>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<BigNumber>

    getNonce(user: string, overrides?: CallOverrides): Promise<BigNumber>

    hasUserLikedNftListing(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      _nftListingFee: BigNumberish,
      whiteListedTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isPaused(overrides?: CallOverrides): Promise<BigNumber>

    isPaymentTokenWhiteListed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    likeNftListing(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    listNftInErc20(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _erc20TokenAddress: string,
      _priceInErc20Token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    listNftInEth(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    nftListingById(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    nftListingFee(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    pauseMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    premiumPercentage(overrides?: CallOverrides): Promise<BigNumber>

    premiumPercentageDecimals(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    resumeMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setIsWhiteListActive(
      _isPaymentTokenWhiteListActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setNftListingFee(
      _nftListingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setPremiumPercentage(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferOwnership(newOwner: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    undoLikeNftListing(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    unlistNftByListingCreator(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    whiteListTokens(tokens: string[], overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    withdrawErc20Premiums(
      _to: string,
      erc20Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    withdrawEthPremiums(_to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    _initialize(
      _name: string,
      _version: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    blackListTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    buyNftInErc20Tokens(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    buyNftInEth(
      _nftListingId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    executeMetaTransaction(
      userAddress: string,
      functionSignature: BytesLike,
      sigR: BytesLike,
      sigS: BytesLike,
      sigV: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getCurrentNftListingCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCurrentNftListingIds(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getNonce(user: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    hasUserLikedNftListing(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      _nftListingFee: BigNumberish,
      whiteListedTokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isPaymentTokenWhiteListed(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    likeNftListing(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    listNftInErc20(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _erc20TokenAddress: string,
      _priceInErc20Token: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    listNftInEth(
      _nftTokenAddress: string,
      _nftTokenId: BigNumberish,
      _priceInWei: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    nftListingById(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    nftListingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    pauseMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    premiumPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>

    premiumPercentageDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    resumeMarketplace(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    setIsWhiteListActive(
      _isPaymentTokenWhiteListActive: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setNftListingFee(
      _nftListingFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setPremiumPercentage(
      _premiumPercentage: BigNumberish,
      _premiumPercentageDecimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    undoLikeNftListing(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    unlistNftByListingCreator(
      _nftListingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    whiteListTokens(
      tokens: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawErc20Premiums(
      _to: string,
      erc20Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    withdrawEthPremiums(
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
